"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Context = /** @class */ (function () {
    function Context() {
        this.payload = process.env.GITHUB_EVENT_PATH ? require(process.env.GITHUB_EVENT_PATH) : {};
        this.event = process.env.GITHUB_EVENT_NAME;
        this.sha = process.env.GITHUB_SHA;
        this.ref = process.env.GITHUB_REF;
        this.workflow = process.env.GITHUB_WORKFLOW;
        this.action = process.env.GITHUB_ACTION;
        this.actor = process.env.GITHUB_ACTOR;
    }
    /**
     * Return the `owner` and `repo` params for making API requests against a
     * repository.
     *
     * ```js
     * const params = context.repo({path: '.github/config.yml'})
     * // Returns: {owner: 'username', repo: 'reponame', path: '.github/config.yml'}
     * ```
     *
     * @param object - Params to be merged with the repo params.
     *
     */
    Context.prototype.repo = function (object) {
        var repo = this.payload.repository;
        if (!repo) {
            throw new Error('context.repo() is not supported for this webhook event.');
        }
        return Object.assign({
            owner: repo.owner.login,
            repo: repo.name
        }, object);
    };
    /**
     * Return the `owner`, `repo`, and `number` params for making API requests
     * against an issue or pull request. The object passed in will be merged with
     * the repo params.
     *
     * ```js
     * const params = context.issue({body: 'Hello World!'})
     * // Returns: {owner: 'username', repo: 'reponame', number: 123, body: 'Hello World!'}
     * ```
     *
     * @param object - Params to be merged with the issue params.
     */
    Context.prototype.issue = function (object) {
        var payload = this.payload;
        return Object.assign({
            number: (payload.issue || payload.pull_request || payload).number
        }, this.repo(object));
    };
    return Context;
}());
exports.Context = Context;
//# sourceMappingURL=context.js.map